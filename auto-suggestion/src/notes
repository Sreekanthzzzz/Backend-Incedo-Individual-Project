function SearchBar() {
  const [searchValue, setSearchValue] = useState('');
  const [suggestions, setSuggestions] = useState([]);

  const handleInputChange = async (e) => {
    const { value } = e.target;
    setSearchValue(value);
    if (value.trim().indexOf(' ') !== -1) {

      const words = value.trim().split(' ');
      const lastWord = words[words.length - 1];
      const response = await fetch(`http://localhost:8084/suggest/getword/${lastWord}`);
      const data = await response.json();
      const filtered = data.map(item =>item.words.toLowerCase());
      setSuggestions(filtered);
    } else {
        const { value } = e.target;
        let sen=searchValue;
        sen=searchValue.substring(0,searchValue.lastIndexOf(" "))
        console.log(sen)
        setSearchValue(value);
        const words = value.split(' ');
        const lastWord = words[words.length - 1];
        const response = await fetch(`http://localhost:8084/suggest/getword/${lastWord}`);
        const data = await response.json();
          const filtered = data.map(item =>item.words.toLowerCase());
          setSuggestions(filtered);
    }
  };


  const handleSuggestionClick = (suggestion) => {
    setSearchValue((prevSearchValue) => {
      const words = prevSearchValue.split(' ');
      words.pop(); 
      words.push(suggestion); 
      return words.join(' ');
    });
    setSuggestions([]);
  };

  return (
    <div>
      <input
        type="text"
        value={searchValue}
        onChange={handleInputChange}
        placeholder="Search..."
      />
      {suggestions.length > 0 && (
        <ul style={{"list-style-type": "none"}}>
          {suggestions.map((suggestion) => (
            <li key={suggestion} onClick={() => handleSuggestionClick(suggestion)}>
              {suggestion}
            </li>
          ))}
        </ul>
      )}
    </div>
  );
}

export default SearchBar;
